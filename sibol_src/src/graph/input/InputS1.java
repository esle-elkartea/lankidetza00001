/*
 * InputS.java
 *
 * Created on 1 de junio de 2006, 17:05
 */

package graph.input;

import funciones.BaseDatos;
import funciones.LimitadorCaracteres;
import funciones.ParCombo;
import funciones.Sesion;
import funciones.Utilidades;
import funciones.UtilidadesSQL;
import graph.beans.SBean;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ResourceBundle;
import java.util.regex.Pattern;
import javax.swing.CellEditor;
import main.Constantes;
import main.Mensaje;

/**
 *
 * @author  sanjose
 */
public class InputS1 extends javax.swing.JPanel {
    private static CellEditor cellEditor;
    private static ResourceBundle bundle = ResourceBundle.getBundle("resources/config/config");
    private SBean datosS;
    private String mensaje = null;
    private String valorEntradaString = null;
    private int tipoInstalacionSeleccionada = -1;
    private String seccionMinima = null;
    
    /** Creates new form InputS */
    public InputS1(CellEditor cellEditor) {
        this.cellEditor = cellEditor;
        initComponents();
        establecerRestricciones();
        cargarOpcionesDesdeBD();
    }
    
    public void installValue(SBean valor) {
        datosS = valor;
        
        cargarOpcionesDesdeBD();
        if(datosS != null) {
            DecimalFormat formateadorEntero = (DecimalFormat) DecimalFormat.getIntegerInstance();
            formateadorEntero.setGroupingUsed(false);
            DecimalFormat formateador = (DecimalFormat) DecimalFormat.getInstance();
            formateador.setGroupingUsed(false);
            jTxtReferencia.setText(String.valueOf(datosS.getReferencia()));
            jTxtUtilizacion.setText(String.valueOf(datosS.getUtilizacion()));
            jTxtCoseno.setText(formateador.format(datosS.getCoseno()));
            jTxtRendimiento.setText(formateador.format(datosS.getRendimiento()));
            jTxtNumeroReceptores.setText(formateadorEntero.format(datosS.getNumeroReceptores()));
            jTxtPotencia.setText(formateadorEntero.format(datosS.getPotencia()));
            for(int i=0;i<jComboBoxMaterial.getItemCount();i++){
                ParCombo elemento = (ParCombo)jComboBoxMaterial.getItemAt(i);
                if(elemento.getKeyString().equals(datosS.getMaterial())){
                    jComboBoxMaterial.setSelectedIndex(i);
                    break;
                }
            }
            for(int i=0;i<jComboBoxTipoSalida.getItemCount();i++){
                ParCombo elemento = (ParCombo)jComboBoxTipoSalida.getItemAt(i);
                if(elemento.getKeyString().equals(datosS.getTipoSalida())){
                    jComboBoxTipoSalida.setSelectedIndex(i);
                    break;
                }
            }
            jComboBoxTension.setSelectedItem(Utilidades.quitarDecimales(String.valueOf(datosS.getTension())));
            jComboBoxTensionAislamiento.setSelectedItem(datosS.getTensionAislamiento());
            jComboBoxAislamiento.setSelectedItem(datosS.getAislamiento());
            for(int i=0; i<jComboBoxTipoInstalacion.getItemCount(); i++){
                ParCombo elemento = (ParCombo)jComboBoxTipoInstalacion.getItemAt(i);
                if(elemento.getKeyString().equals(datosS.getTipoInstalacion())){
                    jComboBoxTipoInstalacion.setSelectedIndex(i);
                    break;
                }
            }
            jTextFieldIntensidadMaximaAdmisible.setText(formateador.format(datosS.getIntensidadMaximaAdmisible()));
            jTxtLongitud.setText(formateador.format(datosS.getLongitud()));
            // esta al final para que no se "machaque" cuando se está cambiando el combo de material...
            jTxtSeccion.setText(formateador.format(datosS.getSeccion()));
            
            if(Pattern.matches("C4\\.[1-3]", jTxtReferencia.getText())){
                jTxtNumeroReceptores.setEditable(false);
            } else {
                jTxtNumeroReceptores.setEditable(true);
            }
        }
        
    }
    
    public SBean getValue() {
        return datosS;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabelUtilizacion = new javax.swing.JLabel();
        jLabelCoseno = new javax.swing.JLabel();
        jLabelRendimiento = new javax.swing.JLabel();
        jBtnAceptar = new javax.swing.JButton();
        jLabelReferencia = new javax.swing.JLabel();
        jTxtReferencia = new javax.swing.JTextField();
        jTxtNumeroReceptores = new javax.swing.JTextField();
        jLabelNumeroReceptores = new javax.swing.JLabel();
        jTxtCoseno = new javax.swing.JTextField();
        jTxtRendimiento = new javax.swing.JTextField();
        jTxtUtilizacion = new javax.swing.JTextField();
        jTxtSeccion = new javax.swing.JTextField();
        jTxtLongitud = new javax.swing.JTextField();
        jComboBoxMaterial = new javax.swing.JComboBox();
        jLabelSeccion = new javax.swing.JLabel();
        jLabelMaterial = new javax.swing.JLabel();
        jTxtPotencia = new javax.swing.JTextField();
        jLabelPotencia = new javax.swing.JLabel();
        jLabelLongitud = new javax.swing.JLabel();
        jLabelTensionAislamiento = new javax.swing.JLabel();
        jComboBoxTipoInstalacion = new javax.swing.JComboBox();
        jLabelTipoInstalacion = new javax.swing.JLabel();
        jLabelIntensidadMaximaAdmisible = new javax.swing.JLabel();
        jTextFieldIntensidadMaximaAdmisible = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxTensionAislamiento = new javax.swing.JComboBox();
        jLabelTension = new javax.swing.JLabel();
        jComboBoxTension = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxAislamiento = new javax.swing.JComboBox();
        jLabelAislamiento = new javax.swing.JLabel();
        jLabelTipoSalida = new javax.swing.JLabel();
        jComboBoxTipoSalida = new javax.swing.JComboBox();
        jLabelIntensidadCalculada1 = new javax.swing.JLabel();
        jTextFieldIntensidadCalculada1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        jLabelUtilizacion.setText("Utilizaci\u00f3n");

        jLabelCoseno.setText("Cos \u03C6");

        jLabelRendimiento.setText("Rendimiento \u03B7");

        jBtnAceptar.setText("Aceptar");
        jBtnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAceptarActionPerformed(evt);
            }
        });

        jLabelReferencia.setText("Referencia");

        jTxtReferencia.setColumns(30);
        jTxtReferencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtReferenciaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtReferenciaFocusLost(evt);
            }
        });

        jTxtNumeroReceptores.setColumns(30);
        jTxtNumeroReceptores.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtNumeroReceptoresFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtNumeroReceptoresFocusLost(evt);
            }
        });

        jLabelNumeroReceptores.setText("N\u00ba Receptores");

        jTxtCoseno.setColumns(30);
        jTxtCoseno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtCosenoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCosenoFocusLost(evt);
            }
        });

        jTxtRendimiento.setColumns(30);
        jTxtRendimiento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtRendimientoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtRendimientoFocusLost(evt);
            }
        });

        jTxtUtilizacion.setColumns(30);

        jTxtSeccion.setColumns(30);
        jTxtSeccion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtSeccionFocusLost(evt);
            }
        });

        jTxtLongitud.setColumns(30);

        jComboBoxMaterial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxMaterialItemStateChanged(evt);
            }
        });

        jLabelSeccion.setText("Secci\u00f3n");

        jLabelMaterial.setText("Material");

        jTxtPotencia.setColumns(30);
        jTxtPotencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtPotenciaFocusLost(evt);
            }
        });

        jLabelPotencia.setText("Potencia");

        jLabelLongitud.setText("Longitud");

        jLabelTensionAislamiento.setText("Tensi\u00f3n aislamiento");

        jComboBoxTipoInstalacion.setEditable(true);
        jComboBoxTipoInstalacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTipoInstalacionItemStateChanged(evt);
            }
        });

        jLabelTipoInstalacion.setText("Tipo instalaci\u00f3n");

        jLabelIntensidadMaximaAdmisible.setText("Int. M\u00e1x. Admisible");

        jTextFieldIntensidadMaximaAdmisible.setEditable(false);

        jLabel1.setText("mm2");

        jLabel2.setText("W");

        jLabel3.setText("V");

        jLabel4.setText("m");

        jLabel5.setText("A");

        jComboBoxTensionAislamiento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "750", "1000" }));
        jComboBoxTensionAislamiento.setEnabled(false);

        jLabelTension.setText("Tensi\u00f3n");

        jComboBoxTension.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "230", "400" }));
        jComboBoxTension.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTensionItemStateChanged(evt);
            }
        });

        jLabel6.setText("V");

        jComboBoxAislamiento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAislamientoItemStateChanged(evt);
            }
        });

        jLabelAislamiento.setText("Aislamiento");

        jLabelTipoSalida.setText("Tipo salida");

        jComboBoxTipoSalida.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTipoSalidaItemStateChanged(evt);
            }
        });

        jLabelIntensidadCalculada1.setText("Int. Calculada");

        jTextFieldIntensidadCalculada1.setEditable(false);

        jLabel7.setText("A");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(32, 32, 32)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabelNumeroReceptores)
                            .add(jLabelCoseno)
                            .add(jLabelReferencia)
                            .add(jLabelTipoSalida))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxTipoSalida, 0, 279, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jTxtNumeroReceptores, 0, 0, Short.MAX_VALUE)
                                    .add(jTxtCoseno, 0, 0, Short.MAX_VALUE)
                                    .add(jTxtReferencia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 62, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabelPotencia)
                                    .add(jLabelRendimiento)
                                    .add(jLabelUtilizacion))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTxtPotencia, 0, 0, Short.MAX_VALUE)
                                    .add(jTxtRendimiento, 0, 0, Short.MAX_VALUE)
                                    .add(jTxtUtilizacion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)))))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabelLongitud)
                            .add(jLabelTension)
                            .add(jLabelIntensidadMaximaAdmisible)
                            .add(jLabelIntensidadCalculada1)
                            .add(jLabelTipoInstalacion))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jTextFieldIntensidadCalculada1)
                                    .add(jTextFieldIntensidadMaximaAdmisible)
                                    .add(jTxtLongitud, 0, 0, Short.MAX_VALUE)
                                    .add(jComboBoxTension, 0, 75, Short.MAX_VALUE))
                                .add(4, 4, 4)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel7)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 87, Short.MAX_VALUE)
                                        .add(jLabelSeccion))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 69, Short.MAX_VALUE)
                                        .add(jLabelAislamiento))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 77, Short.MAX_VALUE)
                                        .add(jLabelMaterial))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel4)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 29, Short.MAX_VALUE)
                                        .add(jLabelTensionAislamiento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jComboBoxAislamiento, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jComboBoxTensionAislamiento, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jComboBoxMaterial, 0, 66, Short.MAX_VALUE)
                                    .add(jTxtSeccion, 0, 0, Short.MAX_VALUE)))
                            .add(jComboBoxTipoInstalacion, 0, 279, Short.MAX_VALUE))))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(jLabel2))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel3))))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(195, Short.MAX_VALUE)
                .add(jBtnAceptar)
                .add(155, 155, 155))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelReferencia)
                    .add(jTxtUtilizacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelUtilizacion)
                    .add(jTxtReferencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelCoseno)
                    .add(jTxtRendimiento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelRendimiento)
                    .add(jTxtCoseno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelNumeroReceptores)
                    .add(jLabel2)
                    .add(jTxtPotencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelPotencia)
                    .add(jTxtNumeroReceptores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelTipoSalida)
                    .add(jComboBoxTipoSalida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabelTension)
                        .add(jComboBoxTension, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel6))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jComboBoxMaterial, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabelMaterial))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelLongitud, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTxtLongitud, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4)
                    .add(jLabelTensionAislamiento)
                    .add(jComboBoxTensionAislamiento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldIntensidadMaximaAdmisible, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelIntensidadMaximaAdmisible)
                    .add(jLabel5)
                    .add(jLabelAislamiento)
                    .add(jComboBoxAislamiento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelIntensidadCalculada1)
                    .add(jTextFieldIntensidadCalculada1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7)
                    .add(jLabelSeccion)
                    .add(jLabel1)
                    .add(jTxtSeccion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelTipoInstalacion)
                    .add(jComboBoxTipoInstalacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBtnAceptar)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtSeccionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtSeccionFocusLost
        calcularIntensidad();
    }//GEN-LAST:event_jTxtSeccionFocusLost

    private void jTxtRendimientoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtRendimientoFocusGained
        valorEntradaString = jTxtRendimiento.getText();
    }//GEN-LAST:event_jTxtRendimientoFocusGained

    private void jTxtCosenoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCosenoFocusGained
        valorEntradaString = jTxtCoseno.getText();
    }//GEN-LAST:event_jTxtCosenoFocusGained

    private void jTxtRendimientoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtRendimientoFocusLost
        try {
            double rendimiento = Double.parseDouble(jTxtRendimiento.getText().replace(",","."));
            if (rendimiento>0 && rendimiento<=1) {
                calcularSeccion();
                calcularIntensidad();
            } else {
                jTxtRendimiento.setText(valorEntradaString);
                Mensaje.error(bundle.getString("ERRORES_EN_DATOS_INTRODUCIDOS")+bundle.getString("EL_CAMPO")+" "+jLabelRendimiento.getText()+" debe estar comprendido entre 0 y 1.\n");
            }
        } catch (NumberFormatException ex) {
            jTxtRendimiento.setText(valorEntradaString);
            Mensaje.error(bundle.getString("ERRORES_EN_DATOS_INTRODUCIDOS")+bundle.getString("EL_CAMPO")+" "+jLabelRendimiento.getText()+" "+bundle.getString("FORMATO_INCORRECTO")+"\n");
        }
    }//GEN-LAST:event_jTxtRendimientoFocusLost

    private void jTxtCosenoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCosenoFocusLost
        try {
            double coseno = Double.parseDouble(jTxtCoseno.getText().replace(",","."));
            if (coseno>0 && coseno<=1) {
                calcularSeccion();
                calcularIntensidad();
            } else {
                jTxtCoseno.setText(valorEntradaString);
                Mensaje.error(bundle.getString("ERRORES_EN_DATOS_INTRODUCIDOS")+bundle.getString("EL_CAMPO")+" "+jLabelCoseno.getText()+" debe estar comprendido entre 0 y 1.\n");
            }
        } catch (NumberFormatException ex) {
            jTxtCoseno.setText(valorEntradaString);
            Mensaje.error(bundle.getString("ERRORES_EN_DATOS_INTRODUCIDOS")+bundle.getString("EL_CAMPO")+" "+jLabelCoseno.getText()+" "+bundle.getString("FORMATO_INCORRECTO")+"\n");
        }
    }//GEN-LAST:event_jTxtCosenoFocusLost

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
// TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    private void jComboBoxTipoInstalacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTipoInstalacionItemStateChanged
        if (jComboBoxTipoInstalacion.getItemCount()==6) {
            if (jComboBoxTipoInstalacion.getSelectedIndex()!=-1) {
                tipoInstalacionSeleccionada = jComboBoxTipoInstalacion.getSelectedIndex();
                switch (tipoInstalacionSeleccionada) {
                    case 0: jComboBoxTipoInstalacion.setEditable(false); break;
                    case 1: jComboBoxTipoInstalacion.setEditable(false); break;
                    case 2: jComboBoxTipoInstalacion.setEditable(false); break;
                    case 3: jComboBoxTipoInstalacion.setEditable(true); break;
                    case 4: jComboBoxTipoInstalacion.setEditable(true); break;
                    case 5: jComboBoxTipoInstalacion.setEditable(true); break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxTipoInstalacionItemStateChanged

    private void jComboBoxMaterialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxMaterialItemStateChanged
        calcularSeccion();
        calcularIntensidad();
    }//GEN-LAST:event_jComboBoxMaterialItemStateChanged

    private void jTxtPotenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtPotenciaFocusLost
        calcularSeccion();
        calcularIntensidad();
    }//GEN-LAST:event_jTxtPotenciaFocusLost

    private void jComboBoxTipoSalidaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTipoSalidaItemStateChanged
        calcularSeccion();
        calcularIntensidad();
    }//GEN-LAST:event_jComboBoxTipoSalidaItemStateChanged

    private void jComboBoxAislamientoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAislamientoItemStateChanged
        if ("EPR".equals(jComboBoxAislamiento.getSelectedItem()) || "XLPE".equals(jComboBoxAislamiento.getSelectedItem()) || "RZ1-K".equals(jComboBoxAislamiento.getSelectedItem())) {
            jComboBoxTensionAislamiento.setSelectedItem("1000");
        } else if ("ES07Z1-K".equals(jComboBoxAislamiento.getSelectedItem()) || "H07V-K".equals(jComboBoxAislamiento.getSelectedItem())) {
            jComboBoxTensionAislamiento.setSelectedItem("750");
        }
        calcularSeccion();
        calcularIntensidad();
    }//GEN-LAST:event_jComboBoxAislamientoItemStateChanged

    private void jComboBoxTensionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTensionItemStateChanged
        calcularSeccion();
        calcularIntensidad();
    }//GEN-LAST:event_jComboBoxTensionItemStateChanged

    private void jTxtNumeroReceptoresFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtNumeroReceptoresFocusGained
        valorEntradaString = jTxtNumeroReceptores.getText();
    }//GEN-LAST:event_jTxtNumeroReceptoresFocusGained

    private void jTxtReferenciaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtReferenciaFocusGained
        valorEntradaString = jTxtReferencia.getText();
    }//GEN-LAST:event_jTxtReferenciaFocusGained
    
    private void jTxtNumeroReceptoresFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtNumeroReceptoresFocusLost
        if(!jTxtNumeroReceptores.getText().equals(valorEntradaString)){
            calcularPotencia();
        }
    }//GEN-LAST:event_jTxtNumeroReceptoresFocusLost
    
    private void jTxtReferenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtReferenciaFocusLost
        if(!jTxtReferencia.getText().equals(valorEntradaString)){
            if(Pattern.matches("C4\\.[1-3]", jTxtReferencia.getText())){
                jTxtNumeroReceptores.setText("1");
                jTxtNumeroReceptores.setEditable(false);
            } else {
                jTxtNumeroReceptores.setEditable(true);
            }
            calcularUtilizacion();
            calcularPotencia();
            calcularSeccion();
            calcularIntensidad();
        }
    }//GEN-LAST:event_jTxtReferenciaFocusLost
    
    private void calcularUtilizacion(){
        String utilizacion = getUtilizacionBD(jTxtReferencia.getText());
        if(utilizacion!=null)jTxtUtilizacion.setText(utilizacion);
    }
    
    private void calcularPotencia(){
        if(validaReferencia() && validaNumeroReceptores()){
            double[] valores = getValoresCircuitoBD(jTxtReferencia.getText());
            double receptores = Double.parseDouble(jTxtNumeroReceptores.getText());
            DecimalFormat formateadorEntero = (DecimalFormat) DecimalFormat.getIntegerInstance();
            formateadorEntero.setGroupingUsed(false);
            if(valores!=null){
                jTxtPotencia.setText(formateadorEntero.format(Math.ceil(receptores*valores[0]*valores[1]*valores[2])));
                calcularSeccion();
                calcularIntensidad();
            }
        }
    }
        
    private void jBtnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAceptarActionPerformed
        if(valida()){
            String referencia = jTxtReferencia.getText();
            String utilizacion = jTxtUtilizacion.getText();
            double coseno = 0;
            double rendimiento = 0;
            double numeroReceptores = 0;
            double potencia = 0;
            double seccion = 0;
            String material = ((ParCombo)jComboBoxMaterial.getSelectedItem()).getKeyString();
            double tension = 0;
            double tensionAislamiento = 0;
            String tipoInstalacion = null;
            if(jComboBoxTipoInstalacion.getSelectedItem() instanceof ParCombo){
                tipoInstalacion = ((ParCombo)jComboBoxTipoInstalacion.getSelectedItem()).getKeyString();
            } else {
                String nuevaInstalacion = String.valueOf(jComboBoxTipoInstalacion.getSelectedItem());
                if (jComboBoxTipoInstalacion.getItemCount()==6) {
                    String tipoInstalacionModificada = "";
                    switch (tipoInstalacionSeleccionada) {
                        case 3: tipoInstalacionModificada="D";break;
                        case 4: tipoInstalacionModificada="E";break;
                        case 5: tipoInstalacionModificada="F";break;
                    }
                    if (null!=tipoInstalacionModificada) {
                        guardarNuevoTipoInstalacion(tipoInstalacionModificada,nuevaInstalacion);
                        
                        ParCombo opcion = (ParCombo)jComboBoxTipoInstalacion.getItemAt(tipoInstalacionSeleccionada);
                        opcion.setKeyString(tipoInstalacionModificada);
                        opcion.setDescription(nuevaInstalacion);
                    }
                } else {
                    String letra = ((ParCombo)jComboBoxTipoInstalacion.getItemAt(jComboBoxTipoInstalacion.getItemCount()-1)).getKeyString();
                    tipoInstalacion = "A";
                    if("A".equals(letra)) tipoInstalacion="B";
                    else if("B".equals(letra)) tipoInstalacion="C";
                    else if("C".equals(letra)) tipoInstalacion="D";
                    else if("D".equals(letra)) tipoInstalacion="E";
                    else if("E".equals(letra)) tipoInstalacion="F";
                    guardarNuevoTipoInstalacion(tipoInstalacion,nuevaInstalacion);
                    jComboBoxTipoInstalacion.addItem(new ParCombo(tipoInstalacion,nuevaInstalacion));
                }
                //if(jComboBoxTipoInstalacion.getItemCount()>=6)jComboBoxTipoInstalacion.setEditable(false);
            }
            double intensidadMaximaAdmisible = 0;
            double ccpia = 0;
            double longitud = 0;
            try {
                coseno = Double.parseDouble(String.valueOf(jTxtCoseno.getText()).replace(",","."));
                rendimiento = Double.parseDouble(String.valueOf(jTxtRendimiento.getText()).replace(",","."));
                numeroReceptores = Double.parseDouble(String.valueOf(jTxtNumeroReceptores.getText()).replace(",","."));
                potencia = Double.parseDouble(String.valueOf(jTxtPotencia.getText()).replace(",","."));
                seccion = Double.parseDouble(String.valueOf(jTxtSeccion.getText()).replace(",","."));
                tension = Double.parseDouble(((String)jComboBoxTension.getSelectedItem()).replace(",","."));
                tensionAislamiento = Double.parseDouble(((String)jComboBoxTensionAislamiento.getSelectedItem()).replace(",","."));
                intensidadMaximaAdmisible = Double.parseDouble(String.valueOf(jTextFieldIntensidadMaximaAdmisible.getText()).replace(",","."));
                longitud = Double.parseDouble(String.valueOf(jTxtLongitud.getText()).replace(",","."));
            } catch(NumberFormatException e) {}
            datosS.setReferencia(referencia);
            datosS.setUtilizacion(utilizacion);
            datosS.setCoseno(coseno);
            datosS.setRendimiento(rendimiento);
            datosS.setNumeroReceptores(numeroReceptores);
            datosS.setPotencia(potencia);
            datosS.setSeccion(seccion);
            datosS.setMaterial(material);
            datosS.setTension(tension);
            datosS.setTensionAislamiento(tensionAislamiento);
            datosS.setTipoInstalacion(tipoInstalacion);
            datosS.setIntensidadMaximaAdmisible(intensidadMaximaAdmisible);
            datosS.setAislamiento((String)jComboBoxAislamiento.getSelectedItem());
            datosS.setLongitud(longitud);
            ParCombo tipoSalida = (ParCombo)jComboBoxTipoSalida.getSelectedItem();
            datosS.setTipoSalida(tipoSalida.getKeyString());
            datosS.setEditado(true);
            cellEditor.stopCellEditing();
        }
    }//GEN-LAST:event_jBtnAceptarActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAceptar;
    private javax.swing.JComboBox jComboBoxAislamiento;
    private javax.swing.JComboBox jComboBoxMaterial;
    private javax.swing.JComboBox jComboBoxTension;
    private javax.swing.JComboBox jComboBoxTensionAislamiento;
    private javax.swing.JComboBox jComboBoxTipoInstalacion;
    private javax.swing.JComboBox jComboBoxTipoSalida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelAislamiento;
    private javax.swing.JLabel jLabelCoseno;
    private javax.swing.JLabel jLabelIntensidadCalculada1;
    private javax.swing.JLabel jLabelIntensidadMaximaAdmisible;
    private javax.swing.JLabel jLabelLongitud;
    private javax.swing.JLabel jLabelMaterial;
    private javax.swing.JLabel jLabelNumeroReceptores;
    private javax.swing.JLabel jLabelPotencia;
    private javax.swing.JLabel jLabelReferencia;
    private javax.swing.JLabel jLabelRendimiento;
    private javax.swing.JLabel jLabelSeccion;
    private javax.swing.JLabel jLabelTension;
    private javax.swing.JLabel jLabelTensionAislamiento;
    private javax.swing.JLabel jLabelTipoInstalacion;
    private javax.swing.JLabel jLabelTipoSalida;
    private javax.swing.JLabel jLabelUtilizacion;
    private javax.swing.JTextField jTextFieldIntensidadCalculada1;
    private javax.swing.JTextField jTextFieldIntensidadMaximaAdmisible;
    private javax.swing.JTextField jTxtCoseno;
    private javax.swing.JTextField jTxtLongitud;
    private javax.swing.JTextField jTxtNumeroReceptores;
    private javax.swing.JTextField jTxtPotencia;
    private javax.swing.JTextField jTxtReferencia;
    private javax.swing.JTextField jTxtRendimiento;
    private javax.swing.JTextField jTxtSeccion;
    private javax.swing.JTextField jTxtUtilizacion;
    // End of variables declaration//GEN-END:variables
    
    private void establecerRestricciones() {
        jTxtReferencia.setDocument(new LimitadorCaracteres(jTxtReferencia, 10, false, false));
        jTxtUtilizacion.setDocument(new LimitadorCaracteres(jTxtUtilizacion, 25, false, false));
        jTxtCoseno.setDocument(new LimitadorCaracteres(jTxtCoseno, 4, true, true));
        jTxtRendimiento.setDocument(new LimitadorCaracteres(jTxtRendimiento, 4, true, true));
        jTxtNumeroReceptores.setDocument(new LimitadorCaracteres(jTxtNumeroReceptores, 3, true, false));
        jTxtPotencia.setDocument(new LimitadorCaracteres(jTxtPotencia, 5, true, false));
        jTxtLongitud.setDocument(new LimitadorCaracteres(jTxtLongitud, 9, true, true));
    }
    
    private boolean valida(){
        boolean resultado = true;
        this.mensaje=null;
        boolean r1 = validaReferencia();
        boolean r2 = validaUtilizacion();
        boolean r3 = validaCoseno();
        boolean r4 = validaRendimiento();
        boolean r5 = validaNumeroReceptores();
        boolean r6 = validaPotencia();
        boolean r7 = validaSeccion();
        boolean r8 = validaMaterial();
        boolean r9 = validaAislamiento();
        boolean r10 = validaTipoInstalacion();
        boolean r11 = validaIntensidadMaximaAdmisible();
        boolean r12 = validaLongitud();
        boolean r13 = validaTipoSalida();
        boolean r14 = validaTensionAislamiento();
        resultado = r1 && r2 && r3 && r4 && r5 && r6 && r7  && r8 && r9 && r10 && r11 && r12 && r13 && r14;
        if(!resultado){
            // Mostrar mensaje
            Mensaje.error(bundle.getString("ERRORES_EN_DATOS_INTRODUCIDOS")+this.mensaje+"\n");
        } else {
            boolean r15 = validaLimitePuntosUtilizacion();
            resultado = r15;
            if(!resultado){
                // Mostrar mensaje
                Mensaje.error(bundle.getString("ERRORES_EN_DATOS_INTRODUCIDOS")+this.mensaje+"\n");
            }
        }
        return resultado;
    }
    
    private boolean validaReferencia(){
        boolean resultado = true;
        String valor = jTxtReferencia.getText();
        String label = jLabelReferencia.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaUtilizacion(){
        boolean resultado = true;
        String valor = jTxtUtilizacion.getText();
        String label = jLabelUtilizacion.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaCoseno() {
        boolean resultado = true;
        String valor = jTxtCoseno.getText();
        String label = " "+jLabelCoseno.getText()+" ";
        if(valor!=null && !"".equals(valor)){
            if(!Pattern.matches("[0-1](,[0-9][0-9]?)??", valor)){
                // Mensaje campo con formato incorrecto
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
                resultado=false;
            }
        } else {
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaRendimiento() {
        boolean resultado = true;
        String valor = jTxtRendimiento.getText();
        String label = " "+jLabelRendimiento.getText()+" ";
        if(valor!=null && !"".equals(valor)){
            if(!Pattern.matches("[0-1](,[0-9][0-9]?)??", valor)){
                // Mensaje campo con formato incorrecto
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
                resultado=false;
            }
        } else {
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaNumeroReceptores() {
        boolean resultado = true;
        String valor = jTxtNumeroReceptores.getText();
        String label = " "+jLabelNumeroReceptores.getText()+" ";
        if(valor!=null && !"".equals(valor)){
            boolean cumplePatron = false;
            String referencia = jTxtReferencia.getText();
            cumplePatron = Pattern.matches("(0?0?[1-9])|(0?[1-9][0-9])|([1-9][0-9]{2})", valor);
            if(!cumplePatron){
                // Mensaje campo con formato incorrecto
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
                resultado=false;
            }
        } else {
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaPotencia(){
        DecimalFormat df = new DecimalFormat("####0.##");
        boolean resultado = true;
        String valor = jTxtPotencia.getText();
        String label = jLabelPotencia.getText();
        if(valor!=null && !"".equals(valor)){
            if(!Pattern.matches("[0-9]{1,5}", valor)){
                // Mensaje campo con formato incorrecto
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
                resultado=false;
            } else {
                // Validar los limites de la potencia
                if(Pattern.matches("(0?0?[0-9])|(0?[1-9][0-9])|([1-9][0-9]{2})", jTxtNumeroReceptores.getText())){
                    ResultSet rs = null;
                    BaseDatos bd = Sesion.getInstance().getBaseDatos();
                    try{
                        String tipo = jTxtReferencia.getText();
                        String ref2 = equivalenciaCircuitos(tipo);
                        rs = bd.ejecSelect("SELECT CCPOTENCIA,CCFACTORSIM,CCFACTORUTIL,CCMAXPUNTOS,CCTIPOPOTE FROM CARACTERISTICAS_CIRCUITOS WHERE CCID='"+ref2+"'");
                        if(rs.next()){
                            int potencia = rs.getInt("CCPOTENCIA");
                            double factorSimultaneidad = rs.getDouble("CCFACTORSIM");
                            double factorUtilizacion = rs.getDouble("CCFACTORUTIL");
                            int maxPuntos = rs.getInt("CCMAXPUNTOS");
                            // C4.1, C4.2 y C4.3 son equivalentes a C4 pero tomando 1 punto de salida
                            if(Pattern.matches("C4\\.[1-3]", jTxtReferencia.getText())) {
                                maxPuntos = 1;
                            }
                            String tipoLimite = rs.getString("CCTIPOPOTE");
                            double max = 0;
                            if("T".equalsIgnoreCase(tipoLimite)){
                                max = Math.ceil(potencia * factorSimultaneidad * factorUtilizacion * maxPuntos);
                            } else if("C".equalsIgnoreCase(tipoLimite)){
                                max = potencia;
                            }
                            if(Integer.parseInt(valor)>max){
                                if(mensaje==null)mensaje="";
                                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("POTENCIA_MAYOR_LIMITE")+" ("+ df.format(max) +")"+"\n";
                                resultado=false;
                            }
                        }
                    } catch(SQLException e){
                        Mensaje.error("Error en InputS.validaPotencia: "+e.getMessage());
                    } finally {
                        try{
                            if(rs!=null)rs.close();
                        } catch(SQLException e){
                            Mensaje.error("Error en InputS.validaPotencia al cerrar el RecordSet: "+e.getMessage());
                        }
                    }
                }
            }
        } else {
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaSeccion(){
        boolean resultado = true;
        String valor = jTxtSeccion.getText();
        String label = jLabelSeccion.getText();
        if(Pattern.matches("C4\\.[1-3]", jTxtReferencia.getText())){
            if(seccionMinima!=null && !"".equals(seccionMinima)){
                if(Double.valueOf(seccionMinima)<2.5){
                    seccionMinima="2.5";        
                }
            } else {
                seccionMinima="2.5";
            }
        }
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        } else if(!Pattern.matches("[0-9]{1,3}(,[0-9][0-9]?)??", valor)){
            // Mensaje campo con formato incorrecto
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
            resultado=false;
        } else if(seccionMinima!=null && !"".equals(seccionMinima)){
            // La seccion es menor que la seccion minima
            if(Double.valueOf(valor.replace(",","."))<Double.valueOf(seccionMinima.replace(",","."))){
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("SECCION_MENOR_LIMITE")+" ("+seccionMinima+")\n";
                resultado = false;
            }
        }
        return resultado;
    }
    
    private boolean validaTensionAislamiento(){
        boolean resultado = true;
        String valor = (String)jComboBoxTensionAislamiento.getSelectedItem();
        String label = jLabelTensionAislamiento.getText();
        if(valor!=null && !"".equals(valor)){
            if(!Pattern.matches("[0-9]{1,4}", valor)){
                // Mensaje campo con formato incorrecto
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
                resultado=false;
            }
        } else {
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }

    private boolean validaAislamiento(){
        boolean resultado = true;
        String valor = (String)jComboBoxAislamiento.getSelectedItem();
        String label = jLabelAislamiento.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaTipoSalida(){
        boolean resultado = true;
        ParCombo tipoSalida = (ParCombo)jComboBoxTipoSalida.getSelectedItem();
        String valor = tipoSalida.getKeyString();
        String label = jLabelTipoSalida.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaTipoInstalacion(){
        boolean resultado = true;
        String valor = null;
        if(jComboBoxTipoInstalacion.getSelectedItem()!=null){
            if (jComboBoxTipoInstalacion.getSelectedItem() instanceof ParCombo) {
                valor=((ParCombo)jComboBoxTipoInstalacion.getSelectedItem()).getKeyString();
            } else {
                valor=(String)jComboBoxTipoInstalacion.getSelectedItem();
            }
        }
        String label = jLabelTipoInstalacion.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaIntensidadMaximaAdmisible(){
        boolean resultado = true;
        String valor = jTextFieldIntensidadMaximaAdmisible.getText();
        String label = jLabelIntensidadMaximaAdmisible.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaMaterial(){
        boolean resultado = true;
        String valor = ((ParCombo)jComboBoxMaterial.getSelectedItem()).getDescription();
        String label = jLabelMaterial.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaLongitud(){
        boolean resultado = true;
        String valor = jTxtLongitud.getText();
        String label = " "+jLabelLongitud.getText()+" ";
        if(valor!=null && !"".equals(valor)){
            if(!Pattern.matches("[0-9]{1,6}(,[0-9][0-9]?)??", valor)){
                // Mensaje campo con formato incorrecto
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
                resultado=false;
            }
        } else {
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaLimitePuntosUtilizacion(){
        boolean resultado = true;
        ResultSet rs = null;
        BaseDatos bd = Sesion.getInstance().getBaseDatos();
        int max;
        String tipo = jTxtReferencia.getText();
        int valor = Integer.parseInt(jTxtNumeroReceptores.getText());
        String label = jLabelNumeroReceptores.getText();
        try{
            String ref2 = equivalenciaCircuitos(tipo);
            rs = bd.ejecSelect("SELECT CCMAXPUNTOS FROM CARACTERISTICAS_CIRCUITOS WHERE CCID='"+ref2+"'");
            if(rs.next()){
               max=rs.getInt("CCMAXPUNTOS");
               if(!rs.wasNull()){
                    if(valor>max){
                        if(mensaje==null)mensaje="";
                        mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("LIMITE_PUNTOS_UTILIZACION_1")+" "+tipo+" "+bundle.getString("LIMITE_PUNTOS_UTILIZACION_2")+" "+String.valueOf(max)+" "+"\n";
                        resultado=false;
                    }
               }
            }
        } catch(SQLException e){
            Mensaje.error("Error en InputS.validaLimitePuntosUtilizacion: "+e.getMessage());
        } finally {
            try{
                if(rs!=null)rs.close();
            } catch(SQLException e){
                Mensaje.error("Error en InputS.validaLimitePuntosUtilizacion al cerrar el RecordSet: "+e.getMessage());
            }
        }
        return resultado;
    }
    
    private String getUtilizacionBD(String referencia){
        String resultado = null;
        ResultSet rs = null;
        BaseDatos bd = Sesion.getInstance().getBaseDatos();
        try{
            // C4.1, C4.2 y C4.3 -> Electrodoméstico
            if(Pattern.matches("C4\\.[1-3]", jTxtReferencia.getText())) {
                resultado = "Electrodoméstico";
            }
            // C6 o C6.x -> Adicional C1
            else if("C6".equals(jTxtReferencia.getText().toUpperCase()) || Pattern.matches("C6\\..*", jTxtReferencia.getText())) {
                resultado = "Adicional C1";
            }
            // C7 o C7.x -> Adicional C2
            else if("C7".equals(jTxtReferencia.getText().toUpperCase()) || Pattern.matches("C7\\..*", jTxtReferencia.getText())) {
                resultado = "Adicional C2";
            }
            else {
                rs = bd.ejecSelect("SELECT CCUTILIZACION FROM CARACTERISTICAS_CIRCUITOS WHERE CCID='"+referencia+"'");
                if(rs.next()){
                    resultado = rs.getString(1);
                }
            }
        } catch(SQLException e){
            Mensaje.error("Error SQL en InputS.getUtilizacionBD: "+e.getMessage());
        } finally {
            try{
                if(rs!=null)rs.close();
            } catch(SQLException e){
                Mensaje.error("Error SQL en InputS.getUtilizacionBD al cerrar el RecordSet: "+e.getMessage());
            }
        }
        return resultado;
    }
    
    private double[] getValoresCircuitoBD(String referencia){
        double[] resultado = null;
        ResultSet rs = null;
        BaseDatos bd = Sesion.getInstance().getBaseDatos();
        try{
            String ref2 = equivalenciaCircuitos(referencia);
            rs = bd.ejecSelect("SELECT CCPOTENCIA,CCFACTORSIM,CCFACTORUTIL FROM CARACTERISTICAS_CIRCUITOS WHERE CCID='"+ref2+"'");
            if(rs.next()){
                resultado = new double[3];
                resultado[0] = rs.getDouble(1);
                resultado[1] = rs.getDouble(2);
                resultado[2] = rs.getDouble(3);
            }
        } catch(SQLException e){
            Mensaje.error("Error SQL en InputS.getValoresCircuitoBD: "+e.getMessage());
        } finally {
            try{
                if(rs!=null)rs.close();
            } catch(SQLException e){
                Mensaje.error("Error SQL en InputS.getValoresCircuitoBD al cerrar el RecordSet: "+e.getMessage());
            }
        }
        return resultado;
    }

    /*
    private double getInterruptorAutomaticoBD(String referencia){
        double resultado = 0;
        ResultSet rs = null;
        BaseDatos bd = Sesion.getInstance().getBaseDatos();
        try{
            rs = bd.ejecSelect("SELECT CCINTERAUTO FROM CARACTERISTICAS_CIRCUITOS WHERE CCID='"+referencia+"'");
            if(rs.next()){
                resultado = rs.getDouble(1);
            }
        } catch(SQLException e){
            Mensaje.error("Error SQL en InputS.getUtilizacionBD: "+e.getMessage());
        } finally {
            try{
                if(rs!=null)rs.close();
            } catch(SQLException e){
                Mensaje.error("Error SQL en InputS.getUtilizacionBD al cerrar el RecordSet: "+e.getMessage());
            }
        }
        return resultado;
    }
     */
    
    private void cargarOpcionesDesdeBD(){
        ResultSet rs = null;
        BaseDatos bd = Sesion.getInstance().getBaseDatos();
        try{
            jComboBoxMaterial.removeAllItems();
            jComboBoxTipoInstalacion.removeAllItems();
            jComboBoxTipoSalida.removeAllItems();
            jComboBoxAislamiento.removeAllItems();
            rs = bd.ejecSelect("SELECT * FROM MATERIALES ORDER BY MADESC");
            while(rs.next()) jComboBoxMaterial.addItem(new ParCombo(rs.getString(1), rs.getString(2)));
            int idInstalacion = ((Integer)Sesion.getInstance().getValorHt(Constantes.SES_INSTALACIONES_ID)).intValue();
            rs = bd.ejecSelect( "SELECT " +
                    "* " +
                    "FROM " +
                    "(" +
                    "SELECT * FROM TIPOS_INST_CIRCUITOS WHERE TNDESC<>'' " +
                    "UNION " +
                    "SELECT 'D' AS TNID,INTIPOCIRCD AS TNDESC FROM INSTALACIONES WHERE INID="+UtilidadesSQL.tratarParametroNumerico(idInstalacion)+" " +
                    "UNION " +
                    "SELECT 'E' AS TNID,INTIPOCIRCE AS TNDESC FROM INSTALACIONES WHERE INID="+UtilidadesSQL.tratarParametroNumerico(idInstalacion)+" " +
                    "UNION " +
                    "SELECT 'F' AS TNID,INTIPOCIRCF AS TNDESC FROM INSTALACIONES WHERE INID="+UtilidadesSQL.tratarParametroNumerico(idInstalacion)+" " +
                    ") AS TABLA " +
                    "WHERE " +
                    "TABLA.TNDESC<>'' " +
                    "ORDER " +
                    "BY TNID");
            while(rs.next())jComboBoxTipoInstalacion.addItem(new ParCombo(rs.getString(1), rs.getString(2)));
            if(jComboBoxTipoInstalacion.getItemCount()>=6)jComboBoxTipoInstalacion.setEditable(false);
            rs = bd.ejecSelect("SELECT TSID, TSDESCCORTA FROM TIPOS_SALIDA ORDER BY TSID ASC");
            while(rs.next()){
                jComboBoxTipoSalida.addItem(new ParCombo(rs.getString("TSID"),rs.getString("TSDESCCORTA")));
            }
            rs = bd.ejecSelect("SELECT AIID FROM MATERIALES_AISLAMIENTO ORDER BY AIID ASC");
            while(rs.next()){
                jComboBoxAislamiento.addItem(rs.getString("AIID"));
            }
        } catch(SQLException e){
            Mensaje.error("Error en InputS.cargarOpcionesDesdeBD al cargar opciones en ComboBox: "+e.getMessage());
        } finally {
            try{
                if(rs!=null)rs.close();
            } catch(SQLException e){
                Mensaje.error("Error en InputS.cargarOpcionesDesdeBD al cerrar el RecordSet: "+e.getMessage());
            }
        }
    }
    
    private void guardarNuevoTipoInstalacion(String letra, String tipoInstalacion){
        BaseDatos bd = Sesion.getInstance().getBaseDatos();
        try{
            int idInstalacion = ((Integer)Sesion.getInstance().getValorHt(Constantes.SES_INSTALACIONES_ID)).intValue();
            bd.ejecModificacion("UPDATE INSTALACIONES SET INTIPOCIRC"+letra+"="+UtilidadesSQL.tratarParametroString(tipoInstalacion)+" WHERE INID="+UtilidadesSQL.tratarParametroNumerico(idInstalacion));
        } catch(SQLException e){
            Mensaje.error("Error en InputS.guardarNuevoTipoInstalacion al cargar opciones en ComboBox: "+e.getMessage());
        }
    }
    
    private void calcularSeccion() {
        jTxtSeccion.setText("");
        ParCombo tipoSalida = (ParCombo)jComboBoxTipoSalida.getSelectedItem();
        String aislamiento = (String)jComboBoxAislamiento.getSelectedItem();
        ParCombo material = (ParCombo)jComboBoxMaterial.getSelectedItem();
        if (tipoSalida != null && aislamiento != null && material != null && validaCoseno() && validaPotencia() && validaRendimiento()){
            double coseno = Double.parseDouble(jTxtCoseno.getText().replace(",","."));
            double rendimiento = Double.parseDouble(jTxtRendimiento.getText().replace(",","."));
            double potencia = Double.parseDouble(jTxtPotencia.getText().replace(",","."));
            double tension = Double.parseDouble(((String)jComboBoxTension.getSelectedItem()).replace(",","."));
            ResultSet rs = null;
            BaseDatos bd = Sesion.getInstance().getBaseDatos();
            
            try{
                String ref = equivalenciaCircuitos(jTxtReferencia.getText());
                rs = bd.ejecSelect( 
                        "SELECT " +
                            "CCSECCMIN " +
                        "FROM " +
                            "CARACTERISTICAS_CIRCUITOS " +
                        "WHERE " +
                            "CCID="+UtilidadesSQL.tratarParametroString(ref)
                        );
                String seccionMinima = null;
                if(rs.next()){
                    seccionMinima = rs.getString("CCSECCMIN");
                }
                String sql =
                        "SELECT " +
                            //"IAINTENSIDAD," +
                            "IASECCION " +
                        "FROM " +
                            "INTENSIDADES_ADMISIBLES " +
                        "WHERE " +
                            "IATSID="+UtilidadesSQL.tratarParametroString(tipoSalida.getKeyString())+" AND " +
                            "IANUMPOLOS="+UtilidadesSQL.tratarParametroNumerico((int)(Utilidades.getFases(tension)))+" AND " +
                            "IAAIGRUPO IN (" +
                                "SELECT " +
                                    "AIGRUPO " +
                                "FROM " +
                                    "MATERIALES_AISLAMIENTO " +
                                "WHERE " +
                                    "AIID="+UtilidadesSQL.tratarParametroString(aislamiento)+
                            ") AND " +
                            "IAMAID="+UtilidadesSQL.tratarParametroString(material.getKeyString())+" AND " +
                            "IAINTENSIDAD>="+UtilidadesSQL.tratarParametroNumerico(getIntensidad(tension,potencia,coseno,rendimiento))+" " +
                        "LIMIT 1";
                rs = bd.ejecSelect(sql);
                if(rs.next()){
                    String seccion = rs.getString("IASECCION");
                    if(seccionMinima!=null && !"".equals(seccionMinima)){
                        if(seccion!=null && !"".equals(seccion)){
                            if(Double.valueOf(seccionMinima)>Double.valueOf(seccion)){
                                this.seccionMinima=seccionMinima;
                            } else {
                                this.seccionMinima=seccion;
                            }
                        } else {
                            this.seccionMinima=seccionMinima;
                        }
                    } else {
                        this.seccionMinima=seccion;
                    }
                    //jTextFieldIntensidadMaximaAdmisible.setText(rs.getString("IAINTENSIDAD").replace(".",","));
                } else {
                    if(seccionMinima!=null){
                        this.seccionMinima=seccionMinima;
                    } else {
                        this.seccionMinima="";
                    }
                    //jTextFieldIntensidadMaximaAdmisible.setText("");
                }
                
                double dblSeccion;
                double dblMinima;
                try{
                    dblSeccion=Double.valueOf(jTxtSeccion.getText().replace(",","."));
                } catch(Exception e){
                    dblSeccion=0;
                }
                try{
                    dblMinima=Double.valueOf(this.seccionMinima.replace(",","."));
                } catch(Exception e){
                    dblMinima=0;
                }

                if(Pattern.matches("C4\\.[1-3]", jTxtReferencia.getText())){
                    this.seccionMinima="2.5";
                    dblMinima=Double.valueOf(this.seccionMinima.replace(",","."));
                }
                
                if("".equals(jTxtSeccion.getText()) || dblSeccion<dblMinima){
                    jTxtSeccion.setText(this.seccionMinima.replace(".",","));
                }
            } catch(SQLException e){
                Mensaje.error("Error en InputS.calcularIntensidadSeccion: "+e.getMessage());
            } finally {
                try{
                    if(rs!=null)rs.close();
                } catch(SQLException e){
                    Mensaje.error("Error en InputS.calcularIntensidadSeccion: "+e.getMessage());
                }
            }
        } else {
            jTxtSeccion.setText("");
            //jTextFieldIntensidadMaximaAdmisible.setText("");
        }
    }
    
    private void calcularIntensidad() {
        ParCombo tipoSalida = (ParCombo)jComboBoxTipoSalida.getSelectedItem();
        String aislamiento = (String)jComboBoxAislamiento.getSelectedItem();
        ParCombo material = (ParCombo)jComboBoxMaterial.getSelectedItem();
        if (tipoSalida != null && aislamiento != null && material != null && validaCoseno() && validaPotencia() && validaRendimiento()){
            double coseno = Double.parseDouble(jTxtCoseno.getText().replace(",","."));
            double rendimiento = Double.parseDouble(jTxtRendimiento.getText().replace(",","."));
            double potencia = Double.parseDouble(jTxtPotencia.getText().replace(",","."));
            double tension = Double.parseDouble(((String)jComboBoxTension.getSelectedItem()).replace(",","."));
            double seccion = Double.parseDouble(jTxtSeccion.getText().replace(",","."));

            ResultSet rs = null;
            BaseDatos bd = Sesion.getInstance().getBaseDatos();
            
            try {
                String sql = 
                        "SELECT " +
                            "IAINTENSIDAD " +
                        "FROM " +
                            "INTENSIDADES_ADMISIBLES " +
                        "WHERE " +
                            "IATSID="+UtilidadesSQL.tratarParametroString(tipoSalida.getKeyString())+" AND " +
                            "IANUMPOLOS="+UtilidadesSQL.tratarParametroNumerico((int)(Utilidades.getFases(tension)))+" AND " +
                            "IAAIGRUPO IN (" +
                                "SELECT " +
                                    "AIGRUPO " +
                                "FROM " +
                                    "MATERIALES_AISLAMIENTO " +
                                "WHERE " +
                                    "AIID="+UtilidadesSQL.tratarParametroString(aislamiento)+
                            ") AND " +
                            "IAMAID="+UtilidadesSQL.tratarParametroString(material.getKeyString())+" AND " +
                            "IASECCION>="+UtilidadesSQL.tratarParametroNumerico(seccion)+" " +
                        "LIMIT 1";
                rs = bd.ejecSelect(sql);
                if(rs.next()) {
                    String intensidad = rs.getString("IAINTENSIDAD");
                    if(intensidad != null) jTextFieldIntensidadMaximaAdmisible.setText(intensidad.replace(".",","));
                    else jTextFieldIntensidadMaximaAdmisible.setText("");
                }
            }
            catch(SQLException e){
                Mensaje.error("Error en InputS.calcularIntensidad: "+e.getMessage());
            }
            finally {
                try{
                    if(rs!=null) rs.close();
                }
                catch(SQLException e){
                    Mensaje.error("Error en InputS.calcularIntensidad: "+e.getMessage());
                }
            }
        } else {
            jTxtSeccion.setText("");
            jTextFieldIntensidadMaximaAdmisible.setText("");
        }
    }
    
    private double getIntensidad(double tension, double potencia, double coseno, double rendimiento){
        double intensidadCalculada = Utilidades.getIntensidad(tension, potencia, coseno, rendimiento);
        DecimalFormat formateador = (DecimalFormat) DecimalFormat.getInstance();
        formateador.setGroupingUsed(false);
        jTextFieldIntensidadCalculada1.setText(formateador.format(intensidadCalculada));
        return intensidadCalculada;
    }

    private String equivalenciaCircuitos(String ref) {
        String ref2 = ref;
        // C4.1, C4.2 y C4.3 son equivalentes a C4
        if(Pattern.matches("C4\\.[1-3]", jTxtReferencia.getText())) {
            ref2 = "C4";
        }
        // C6 o C6.x es equivalente a C1
        if("C6".equals(jTxtReferencia.getText().toUpperCase()) || Pattern.matches("C6\\..*", jTxtReferencia.getText())) {
            ref2 = "C1";
        }
        // C7 o C7.x es equivalente a C2
        if("C7".equals(jTxtReferencia.getText().toUpperCase()) || Pattern.matches("C7\\..*", jTxtReferencia.getText())) {
            ref2 = "C2";
        }
        
        return ref2;
    }
}
