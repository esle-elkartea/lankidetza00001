package graph.input;

import funciones.BaseDatos;
import funciones.LimitadorCaracteres;
import funciones.ParCombo;
import funciones.Sesion;
import graph.beans.AcomBean;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ResourceBundle;
import java.util.regex.Pattern;
import javax.swing.CellEditor;
import main.Mensaje;

public class InputAcom extends javax.swing.JPanel {
    private static CellEditor cellEditor;
    private static ResourceBundle bundle = ResourceBundle.getBundle("resources/config/config");
    private AcomBean datosAtom;
    private String mensaje = null;
    
    /** Creates new form InputAtom */
    public InputAcom(CellEditor cellEditor) {
        this.cellEditor = cellEditor;
        initComponents();
        establecerRestricciones();
        cargarOpcionesDesdeBD();
    }
    
    public void installValue(AcomBean valor) {
        datosAtom = valor;
        
        if(datosAtom != null) {
            jTextFieldReferencia.setText(String.valueOf(datosAtom.getReferencia()));            
            for(int i=0;i<jCmbBxPuntoConexionAcometida.getItemCount();i++){
                ParCombo elemento = (ParCombo)jCmbBxPuntoConexionAcometida.getItemAt(i);
                if(elemento.getKeyString().equals(datosAtom.getPuntoConexion())){
                    jCmbBxPuntoConexionAcometida.setSelectedIndex(i);
                    break;
                }
            }
            for(int i=0;i<jCmbBxTipoAcometida.getItemCount();i++){
                ParCombo elemento = (ParCombo)jCmbBxTipoAcometida.getItemAt(i);
                if(elemento.getKeyString().equals(datosAtom.getTipoLinea())){
                    jCmbBxTipoAcometida.setSelectedIndex(i);
                    break;
                }
            }
            jTextFieldSeccion.setText(DecimalFormat.getInstance().format(datosAtom.getSeccion()));
            for(int i=0;i<jComboBoxMaterial.getItemCount();i++){
                ParCombo elemento = (ParCombo)jComboBoxMaterial.getItemAt(i);
                if(elemento.getKeyString().equals(datosAtom.getMaterial())){
                    jComboBoxMaterial.setSelectedIndex(i);
                    break;
                }
            }
        }
    }
    
    public AcomBean getValue() {
        return datosAtom;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jBtnAceptar = new javax.swing.JButton();
        jLabelReferencia = new javax.swing.JLabel();
        jTextFieldReferencia = new javax.swing.JTextField();
        jTextFieldSeccion = new javax.swing.JTextField();
        jComboBoxMaterial = new javax.swing.JComboBox();
        jLabelSeccion = new javax.swing.JLabel();
        jLabelMaterial = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jCmbBxPuntoConexionAcometida = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jCmbBxTipoAcometida = new javax.swing.JComboBox();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        jBtnAceptar.setText("Aceptar");
        jBtnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAceptarActionPerformed(evt);
            }
        });

        jLabelReferencia.setText("Referencia");

        jLabelSeccion.setText("Secci\u00f3n");

        jLabelMaterial.setText("Material");

        jLabel1.setText("mm2");

        jLabel12.setText("Punto de conexi\u00f3n");

        jLabel17.setText("Tipo");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabelMaterial)
                    .add(jLabelSeccion)
                    .add(jLabelReferencia)
                    .add(jLabel12)
                    .add(jLabel17))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jBtnAceptar)
                    .add(jTextFieldReferencia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .add(jCmbBxPuntoConexionAcometida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jCmbBxTipoAcometida, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxMaterial, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldSeccion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jLabel1))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelReferencia)
                    .add(jTextFieldReferencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(jCmbBxPuntoConexionAcometida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(jCmbBxTipoAcometida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelSeccion)
                    .add(jTextFieldSeccion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelMaterial)
                    .add(jComboBoxMaterial, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBtnAceptar)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
// TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed
    
    private void jBtnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAceptarActionPerformed
        if(valida()){
            datosAtom.setReferencia(jTextFieldReferencia.getText());
            datosAtom.setPuntoConexion(((ParCombo)jCmbBxPuntoConexionAcometida.getSelectedItem()).getKeyString());
            datosAtom.setTipoLinea(((ParCombo)jCmbBxTipoAcometida.getSelectedItem()).getKeyString());
            if ("".equals(jTextFieldSeccion.getText())) {
                datosAtom.setSeccion(0);
            } else {
                datosAtom.setSeccion(Double.parseDouble((jTextFieldSeccion.getText()).replace(",",".")));
            }
            datosAtom.setMaterial(((ParCombo)jComboBoxMaterial.getSelectedItem()).getKeyString());
            datosAtom.setEditado(true);
            cellEditor.stopCellEditing();
        }
    }//GEN-LAST:event_jBtnAceptarActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAceptar;
    private javax.swing.JComboBox jCmbBxPuntoConexionAcometida;
    private javax.swing.JComboBox jCmbBxTipoAcometida;
    private javax.swing.JComboBox jComboBoxMaterial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabelMaterial;
    private javax.swing.JLabel jLabelReferencia;
    private javax.swing.JLabel jLabelSeccion;
    private javax.swing.JTextField jTextFieldReferencia;
    private javax.swing.JTextField jTextFieldSeccion;
    // End of variables declaration//GEN-END:variables
    
    private void establecerRestricciones() {
        jTextFieldReferencia.setDocument(new LimitadorCaracteres(jTextFieldReferencia, 25, false, false));
        jTextFieldSeccion.setDocument(new LimitadorCaracteres(jTextFieldSeccion, 5, true, true));
    }
        
    private boolean valida(){
        boolean resultado = true;
        this.mensaje=null;
        resultado = resultado && validaReferencia();
        //resultado = resultado && validaSeccion();
        //resultado = resultado && validaMaterial();
        if(!resultado){
            // Mostrar mensaje
            Mensaje.error(bundle.getString("ERRORES_EN_DATOS_INTRODUCIDOS")+this.mensaje+"\n");
        }
        return resultado;
    }
    
    private void cargarOpcionesDesdeBD(){
        ResultSet rs = null;
        BaseDatos bd = Sesion.getInstance().getBaseDatos();
        try{
            rs = bd.ejecSelect("SELECT * FROM PTOS_CONEXION ORDER BY PCDESC");
//            jCmbBxPuntoConexionAcometida.addItem(new ParCombo("", ""));
            while(rs.next()){
                jCmbBxPuntoConexionAcometida.addItem(new ParCombo(rs.getString(1), rs.getString(2)));
            }
            rs = bd.ejecSelect("SELECT * FROM TIPOS_LINEA ORDER BY TLDESC");
//            jCmbBxTipoAcometida.addItem(new ParCombo("", ""));
            while(rs.next()){
                jCmbBxTipoAcometida.addItem(new ParCombo(rs.getString(1), rs.getString(2)));
            }
            rs = bd.ejecSelect("SELECT * FROM MATERIALES ORDER BY MADESC");
            jComboBoxMaterial.addItem(new ParCombo("", ""));
            while(rs.next()){
                jComboBoxMaterial.addItem(new ParCombo(rs.getString(1), rs.getString(2)));
            }
        } catch(SQLException e){
            Mensaje.error("Error en InputAtom.cargarOpcionesDesdeBD al cargar opciones en ComboBox: "+e.getMessage());
        } finally {
            try{
                if(rs!=null)rs.close();
            } catch(SQLException e){
                Mensaje.error("Error en InputAtom.cargarOpcionesDesdeBD al cerrar el RecordSet: "+e.getMessage());
            }
        }
    }
       
    private boolean validaReferencia(){
        boolean resultado = true;
        String valor = jTextFieldReferencia.getText();
        String label = jLabelReferencia.getText();
        if(valor==null || "".equals(valor)){
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
    private boolean validaSeccion() {
        boolean resultado = true;
        String valor = jTextFieldSeccion.getText();
        String label = jLabelSeccion.getText();
        if(valor!=null && !"".equals(valor)){
            if(!Pattern.matches("[0-9]{1,3}(,[0-9][0-9]?)??", valor)){
                // Mensaje campo con formato incorrecto
                if(mensaje==null)mensaje="";
                mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("FORMATO_INCORRECTO")+"\n";
                resultado=false;
            }
        } else {
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }

    private boolean validaMaterial() {
        boolean resultado = true;
        ParCombo valor = (ParCombo)jComboBoxMaterial.getSelectedItem();
        if(valor==null || "".equals(valor.getDescription())){
            String label = " "+jLabelMaterial.getText()+" ";
            // Mensaje campo obligatorio
            if(mensaje==null)mensaje="";
            mensaje+= bundle.getString("EL_CAMPO")+" "+label+" "+bundle.getString("ES_OBLIGATORIO")+"\n";
            resultado = false;
        }
        return resultado;
    }
    
}
